(function() {
    'use strict';

    describe('computeStackTrace', function(){
        describe('domain regex', function(){
            var regex = /(.*)\:\/\/([^\/]+)\/{0,1}([\s\S]*)/;
            it('should return subdomains properly', function (){
                var url = 'https://subdomain.yoursite.com/assets/main.js';
                var domain = 'subdomain.yoursite.com';
                expect(regex.exec(url)[2]).toBe(domain);
            });
            it('should return domains correctly with any protocol', function(){
                var url = 'http://yoursite.com/assets/main.js';
                var domain = 'yoursite.com';
                expect(regex.exec(url)[2]).toBe(domain);
            });
            it('should return the correct domain when directories match the domain', function(){
                var url = 'https://mysite.com/mysite/main.js';
                var domain = 'mysite.com';
                expect(regex.exec(url)[2]).toBe(domain);
            });
        });

        describe('can parse stack', function () {
            function createException() {
                function throwError() {
                    throw new ReferenceError('This is a test');
                }
                try {
                    throwError();
                }
                catch (e) {
                    var t = TraceKit.computeStackTrace(e, 25);
                    console.log("tttttt");
                    console.log(JSON.stringify(t));
                    return e;
                }
            }

            it('should rhave stacktrace', function() {
                expect(createException()).toBe(null);
            });
        });
    });
})();
